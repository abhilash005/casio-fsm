%{
%}

%class Watch
%header Watch.h

%start WatchFsm::Timekeep

// Top-level fsm, governs transitions between watch modes, namely timekeeping
// (aka time), alarm, countdown and stopwatch (circularly, on C button).
// Also, on A button, delve into the time set mode.
// Also, the Default state Tick internal loop increments clock (by one sec.)

%map WatchFsm
%%
Timekeep
{
	C			Alarm						{ showAlarm(); }

	A			push(TimeSet::Seconds)		{ resetReturnTimeout(); }
}

Alarm
{
	C			Countdown					{ showCountdown(); }

	A			push(AlarmSet::Hour)
	{
		setAlarmOn();
		resetReturnTimeout();
	}

	E			nil							{ switchAlarmType(); }
}

Countdown
{
	C			Stopwatch					{ showStopwatch(); }

	A[ctxt.isCountdownOn()]	nil
	{
		invertCountdownOn();
		resetCountdown();
	}

	A			push(CountdownSet::Hour)	{ resetReturnTimeout(); }

	E			nil							{ invertCountdownOn(); }
}

Stopwatch
{
	C			Timekeep				{ showTime(); }
}

Default
{
	Tick		nil
	{
		incTime();
		decCountdown();
	}

	Default		nil		{}
}
%%


%map TimeSet
%%

// C button circularly switches current value to set
// Seconds -> Hour -> Minutes -> Year -> Month -> Day
// and then return Day -> Seconds
//
// E button changes current value: for all but seconds, the value is
// incremented, the seconds are reset to 0 and minutes are rounded
// Also, if no button pressed for 10 sec., return to timekeeping mode
// TODO long pressed E makes changes at high speed


// defaults, taken from any state in TimeSet
Default
{
	A		pop()	{ resetReturnTimeout(); }

	D		nil
	{
		// invert 24/AM-PM mode
		invert24Pm();
		resetReturnTimeout();
	}

	B		nil		{ resetReturnTimeout(); }

	// return to timekeeping if no button pressed for 50 sec.
	Tick[ctxt.returnTimeoutElapsed() > 50]	pop()
	{
		incTime();
		decCountdown();
	}

	Tick		nil
	{
		incTime();
		decCountdown();
	}
}

Seconds
	Entry	{ setCurrEdit(Watch::SEC); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C							Hour
	{ resetReturnTimeout(); }

	E[ctxt.seconds() < 30]		nil
	{
		resetSeconds();
		resetReturnTimeout();
	}

	E[ctxt.seconds() >=30]		nil
	{
		resetSeconds();
		incMinutes();
		resetReturnTimeout();
	}
}
Hour
	Entry	{ setCurrEdit(Watch::HOUR); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Minutes		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incHour();
	}
}
Minutes
	Entry	{ setCurrEdit(Watch::MIN); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Year		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incMinutes();
	}
}
Year
	Entry	{ setCurrEdit(Watch::YEAR); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Month		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incYear();
	}
}
Month
	Entry	{ setCurrEdit(Watch::MONTH); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Day			{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incMonth();
	}
}
Day
	Entry	{ setCurrEdit(Watch::MONTHDAY); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Seconds		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incDay();
	}
}
%%

%map AlarmSet
%%

// C button circularly switches current value to set
// Hour -> Minutes -> Month -> Day
// and then return Day -> Hour
//
// E button increments curr value
// Also, if no button pressed for 50 sec., return to alarm mode
// TODO long pressed E makes changes at high speed


// defaults, taken from any state in TimeSet
Default
{
	A		pop()	{ resetReturnTimeout(); }

	D		nil		{ resetReturnTimeout(); }
	B		nil		{ resetReturnTimeout(); }

	// return to timekeeping if no button pressed for 50 sec.
	Tick[ctxt.returnTimeoutElapsed() > 50]	pop()
	{
		incTime();
		decCountdown();
	}

	Tick		nil
	{
		incTime();
		decCountdown();
	}
}

Hour
	Entry	{ setCurrEdit(Watch::HOUR); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Minutes		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incAlarmHour();
	}
}
Minutes
	Entry	{ setCurrEdit(Watch::MIN); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Month		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incAlarmMinutes();
	}
}
Month
	Entry	{ setCurrEdit(Watch::MONTH); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Day			{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incAlarmMonth();
	}
}
Day
	Entry	{ setCurrEdit(Watch::MONTHDAY); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Hour		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incAlarmDay();
	}
}
%%

%map CountdownSet
%%

// C button circularly switches current value to set
// Hour -> Minutes -> Seconds
// and then return Seconds -> Hour
//
// E button increments curr value
// Also, if no button pressed for 50 sec., return to countdown mode
// TODO long pressed E makes changes at high speed


// defaults, taken from any state in TimeSet
Default
{
	A		pop()
	{
		resetCountdown();
		resetReturnTimeout();
	}

	D		nil
	{
		invertCountdownRepeat();
		resetReturnTimeout();
	}

	B		nil		{ resetReturnTimeout(); }

	// return to alarm if no button pressed for 50 sec.
	Tick[ctxt.returnTimeoutElapsed() > 50]	pop()
	{
		incTime();
		resetCountdown();
	}

	Tick		nil { incTime(); }
}

Hour
	Entry	{ setCurrEdit(Watch::HOUR); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Minutes		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incCountdownHour();
	}
}
Minutes
	Entry	{ setCurrEdit(Watch::MIN); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Seconds		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incCountdownMinutes();
	}
}
Seconds
	Entry	{ setCurrEdit(Watch::SEC); }
	Exit	{ setCurrEdit(Watch::NONE); }
{
	C				Hour		{ resetReturnTimeout(); }

	E				nil
	{
		resetReturnTimeout();
		incCountdownSeconds();
	}
}
%%
